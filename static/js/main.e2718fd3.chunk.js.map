{"version":3,"sources":["assets/images/open_graph.jpg","pages/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","HomePage","name","content","App","props","property","OG_IMG","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,wC,kKCgB5BC,EAX2B,WACxC,OACE,oCACE,kBAAC,IAAD,KACE,8DACA,0BAAMC,KAAK,SAASC,QAAQ,e,iBCmBrBC,EArBiB,SAAAC,GAC9B,OACE,oCACE,kBAAC,IAAD,KACE,0CACA,0BAAMH,KAAK,cAAcC,QAAQ,0GACjC,0BAAMG,SAAS,WAAWH,QAAQ,sBAClC,0BAAMG,SAAS,iBAAiBH,QAAQ,sCACxC,0BAAMG,SAAS,WAAWH,QAASI,OAErC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,qBAAqBC,UAAWR,IAC5C,kBAAC,IAAD,CAAOO,KAAK,YACZ,kBAAC,IAAD,CAAOA,KAAK,eACZ,kBAAC,IAAD,CAAOA,KAAK,6BACZ,kBAAC,IAAD,CAAUA,KAAK,IAAIE,GAAG,0BCXVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e2718fd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/open_graph.f7c8b433.jpg\";","import React from 'react';\nimport { Helmet } from 'react-helmet-async';\n\ninterface HomePageProps {}\n\nconst HomePage: React.FC<HomePageProps> = () => {\n  return (\n    <>\n      <Helmet>\n        <title>ttingho | Self Introduction</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport HomePage from './pages/HomePage';\nimport OG_IMG from './assets/images/open_graph.jpg';\n\ninterface AppProps {}\n\nconst App: React.FC<AppProps> = props => {\n  return (\n    <>\n      <Helmet>\n        <title>ttingho</title>\n        <meta name='description' content='열정적인 웹 개발자의 자기소개 사이트.' />\n        <meta property='og:title' content='Self Introduction' />\n        <meta property='og:description' content='self-introduction page of ttingho' />\n        <meta property='og:image' content={OG_IMG} />\n      </Helmet>\n      <Switch>\n        <Route path='/Self_Introduction' component={HomePage} />\n        <Route path='/myinfo' />\n        <Route path='/portfolio' />\n        <Route path='/portfolio/@:projectname' />\n        <Redirect path='*' to='/Self_Introduction' />\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HelmetProvider>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </HelmetProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}